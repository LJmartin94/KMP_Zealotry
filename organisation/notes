3 big topics to get right are:
* General Architecture/ project layout
* Navigation between ui.views/ screens
* State management

Continue with:
https://medium.com/@dheerubhadoria/jetpack-compose-android-app-with-mvvm-architecture-and-retrofit-api-integration-4eb61ca6fbf2
Even though it doesn't make sense for something so small, see if you can set up MVVM for a date component
(with clock that shows seconds that is simply observed by the view?),
so we can experiment with what MVVM architecture split by components would look like.

Navigation:
General navigation theory -
https://developer.android.com/guide/navigation
Compose specific -
https://developer.android.com/jetpack/compose/navigation

Tutorial on getting started with KMM:
https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-explore-composables.html#implementing-composable-functions

Feature parity with React app:
https://github.com/LJmartin94/React_Zealotry

Localisation:
https://phrase.com/blog/posts/internationalizing-jetpack-compose-android-apps/
https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-images-resources.html#resource-usage

MVVM:
https://medium.com/weeronline/our-approach-to-modularization-and-mvvm-44aae0a3ea41

Architecture example for MVVM & API calls:
https://medium.com/@nitheeshag/building-a-compose-multiplatform-app-with-an-architectural-pattern-e31a85e82927

Example apps:
https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-samples.html